!function(e){var t={};function n(a){if(t[a])return t[a].exports;var i=t[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(a,i,function(t){return e[t]}.bind(null,i));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=10)}({10:function(e,t){function n(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function a(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}var i={fname:"",lname:"",mname:"",email:"",password:"",username:"",role:{ceo:"ceo"}},r=document.getElementById("register_root");function s(e){return fetch("/register",{method:"post",mode:"cors",headers:{"Content-Type":"application/json"},body:JSON.stringify({user:e})}).then((function(e){return e.ok?e.json():new Promise((function(e,t){t("Server error, user probably not saved")}))})).catch((function(e){return new Promise((function(e,t){t("Server error, user probably not saved")}))}))}var l=function(e){function t(t){var a;return(a=e.call(this,t)||this).state={},a.handlePassChange=a.handlePassChange.bind(n(a)),s(i).catch((function(e){console.log(e)})),a}a(t,e);var r=t.prototype;return r.handlePassChange=function(e){},r.render=function(){return React.createElement("div",{className:""},React.createElement("div",null,React.createElement("p",null,"Thank you for registering"),React.createElement("p",null,React.createElement("i",{className:"fa fa-check w3-text-green"}),"Just one more step to go"),React.createElement("div",null,React.createElement("p",null,"A verification Email has been sent to your email. Please confirm that the email your submitted is yours"))),React.createElement("div",null))},t}(React.Component),c=function(e){function t(t){var a;return(a=e.call(this,t)||this).state={name:(i.lname?i.lname+" ":"")+(i.fname?i.fname+" ":"")+(i.mname?i.mname:"")||"",isValid:!1},a.onChange=a.onChange.bind(n(a)),a}a(t,e);var r=t.prototype;return r.onChange=function(e){var t=this,n=e.target.value,a=n.split(" "),r=a[0],s=a[1],l=a[2];this.setState((function(e){return e.name=n,i.fname=s||"",i.lname=r||"",i.mname=l||"",i.fname&&(i.lname||i.mname)&&(e.isValid=!0),e}),(function(){console.log(t.state.name),t.state.isValid?t.props.hasEdited(!0):t.props.hasEdited(!1)}))},r.render=function(){var e=this.state.isValid;return React.createElement("div",{className:"div_subview"},React.createElement("div",{className:"div_label"},React.createElement("p",null,"Full name here..")),React.createElement("div",null,e?React.createElement("i",{className:"fa fa-check w3-text-green"}):null,React.createElement("input",{required:!0,value:this.state.name,onChange:this.onChange,className:"input_name"})))},t}(React.Component),o=(React.Component,function(e){function t(t){var a;return(a=e.call(this,t)||this).state={password:i.password||"",re_pass:"",equal:!0,validPass:!1},a.handlePassChange=a.handlePassChange.bind(n(a)),a.handleRePassChange=a.handleRePassChange.bind(n(a)),a}a(t,e);var r=t.prototype;return r.handleRePassChange=function(e){var t=e.target.value,n=e.target;this.setState((function(e){return e.re_pass=t,t.length>0&&e.password!==e.re_pass?(e.equal=!1,n.classList.add("pass_error"),console.log()):(n.classList.remove("pass_error"),i.password=t,e.equal=!0,console.log("equal")),e}))},r.handlePassChange=function(e){var t=this,n=e.target.value;this.setState((function(e){return e.password=n,i.password=n,e.password!==e.re_pass?(e.equal=!1,e.validPass=!0):(e.equal=!0,e.validPass=!1,i.password=n),e}),(function(){console.log(t.state.password),i.password?t.props.hasEdited(!0):t.props.hasEdited(!1)}))},r.render=function(){return React.createElement("div",{className:""},React.createElement("div",{className:"div_label"},React.createElement("label",null,"Enter password....")),React.createElement("div",null,this.state.validPass?React.createElement("i",{className:"fa fa-check w3-text-green"}):React.createElement("i",null),React.createElement("input",{className:"input_pass",type:"password",autocomplete:"new-password",value:this.state.pass,onChange:this.handlePassChange})),React.createElement("div",{className:"div_label"},React.createElement("label",null,"Confirm password....")),React.createElement("div",null,this.state.equal&&this.state.re_pass?React.createElement("i",{className:"fa fa-check w3-text-green"}):!this.state.equal&&this.state.re_pass?React.createElement("i",{className:"fa fa-remove w3-text-red"}):null," ",React.createElement("input",{className:"input_pass",type:"password",placeholder:"Please confirm password...",value:this.state.re_pass,onChange:this.handleRePassChange})))},t}(React.Component)),u=function(e){function t(t){var a;return(a=e.call(this,t)||this).state={username:i.username||"",validUsername:!0,isUnique:!0},a.props.hasEdited(!!a.state.username),a.onChange=a.onChange.bind(n(a)),a}a(t,e);var r=t.prototype;return r.onChange=function(e){var t=this,n=e.target.value;this.setState((function(e){return i.username=n,e.username=n,e.isUnique=!0,e.validUsername=!0,e}),(function(){n.length>1&&(t.state.username,fetch("/validate/username",{method:"post",mode:"cors",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:i.username})}).then((function(e){return e.ok?e.json():new Promise((function(e,t){t("server error!")}))})).catch((function(e){return new Promise((function(e,t){t("server error!")}))}))).then((function(e){e.valid?t.props.hasEdited(!0):t.setState((function(e){return e.isUnique=!1,e.validUsername=!1,e}))})).catch((function(e){console.log("Could not validate!"),t.hasEdited(!1)})),console.log(t.state.username)}))},r.render=function(){return React.createElement("div",{className:"div_subview"},React.createElement("div",{className:"div_label"},React.createElement("label",null,"Enter username...")),React.createElement("input",{value:this.state.username,onChange:this.onChange,className:"input_text"}),this.state.isUnique?null:React.createElement("div",null,React.createElement("p",null,"Username already taken")),this.state.validUsername?null:React.createElement("div",null,React.createElement("p",null,"Username not valid")))},t}(React.Component),d=function(e){function t(t){var a;return a=e.call(this,t)||this,console.log(a.state),a.state={email:i.email||"",validEmail:!0,isUnique:!0},a.props.hasEdited(!!a.state.email),a.onChange=a.onChange.bind(n(a)),a}a(t,e);var r=t.prototype;return r.onChange=function(e){var t=this,n=e.target.value;this.setState((function(e){return i.email=n,e.email=n,e.isUnique=!0,e.validEmail=!0,e}),(function(){n.length>1&&(t.state.email,fetch("/validate/email",{method:"post",mode:"cors",headers:{"Content-Type":"application/json"},body:JSON.stringify({email:i.email})}).then((function(e){return e.ok?e.json():new Promise((function(e,t){t("Server Error")}))})).catch((function(e){return new Promise((function(t,n){n(e)}))}))).then((function(e){e.valid?t.props.hasEdited(!0):t.setState((function(e){return e.isUnique=!1,e.validEmail=!1,e}))})).catch((function(e){console.log(e),t.props.hasEdited(!1)})),console.log(t.state.email)}))},r.render=function(){return React.createElement("div",{className:"div_subview"},React.createElement("div",{className:"div_label"},React.createElement("p",null,"Enter email...")),React.createElement("input",{value:this.state.email,onChange:this.onChange,className:"input_text"}),this.state.isUnique?null:React.createElement("div",null,React.createElement("p",null,"Email already taken")),this.state.validEmail?null:React.createElement("div",null,React.createElement("p",null,"Email not valid")))},t}(React.Component),m=[{viewItem:c,type:"name"},{viewItem:d,type:"email"},{viewItem:u,type:"username"},{viewItem:o,type:"password"},{viewItem:l,type:"pre_email"}],h=function(e){function t(t){var a;return(a=e.call(this,t)||this).state={view:0,canNext:!1},a.handleNextClick=a.handleNextClick.bind(n(a)),a.handleRegisterClick=a.handleRegisterClick.bind(n(a)),a.handlePrevClick=a.handlePrevClick.bind(n(a)),a.handleReloadClick=a.handleReloadClick.bind(n(a)),a.handleViewEdit=a.handleViewEdit.bind(n(a)),a}a(t,e);var r=t.prototype;return r.handleRegisterClick=function(e){var t=this;e.preventDefault();this.state.view;s(i).then((function(e){return e.isSaved?fetch("/login",{method:"post",mode:"cors",headers:{"Content-Type":"application/json"},body:JSON.stringify({username:i.username,password:i.password})}).then((function(e){return e.ok?e.json():new Promise((function(e,t){t("Server error, user probably not saved")}))})).catch((function(e){return new Promise((function(e,t){t("Server error, user probably not saved")}))})):new Promise((function(e,t){t("Likely server error")}))})).then((function(e){if(!e.isLoggedIn)return new Promise((function(e,t){t("Likely server error")}));console.log("You're logged in"),m.length-1>t.state.view&&t.setState({view:++t.state.view,canNext:!1})})).catch((function(e){console.log(e)}))},r.handleNextClick=function(e){e.preventDefault();this.state.view;m.length-1>this.state.view&&this.setState({view:++this.state.view,canNext:!1})},r.handleReloadClick=function(e){this.setState((function(e){return e}))},r.handleViewEdit=function(e){this.setState((function(t){return t.canNext=e,t}))},r.handlePrevClick=function(e){this.state.view>0&&this.setState({view:--this.state.view})},r.render=function(){view=this.state.view;var e,t=3===view?React.createElement("div",{className:"div_next w3-btn w3-cyan w3-text-white",onClick:this.handleRegisterClick},"Save"):React.createElement("div",{className:"div_next w3-btn w3-cyan w3-text-white",onClick:this.handleNextClick},"Next");switch(view){case 0:e=React.createElement(c,{hasEdited:this.handleViewEdit,view:view});break;case 1:e=React.createElement(d,{hasEdited:this.handleViewEdit,view:view});break;case 2:e=React.createElement(u,{hasEdited:this.handleViewEdit,view:view});break;case 3:e=React.createElement(o,{hasEdited:this.handleViewEdit,view:view});break;case 4:e=React.createElement(l,{hasEdited:this.handleViewEdit,view:view})}React.createElement("div",null,React.createElement("p",null,"Thanks for registering with us!"));return React.createElement("form",{className:"div_superview"},React.createElement("div",{className:"div_inputview"},e),React.createElement("div",{className:"div_controls"},view>0?React.createElement("div",{onClick:this.handlePrevClick,className:"div_prev w3-btn w3-cyan w3-text-white"},"Back"):null,this.state.canNext?t:null,React.createElement("div",{className:"w3-hide",onClick:this.handleReloadClick},"Log in Via")))},t}(React.Component);ReactDOM.render(React.createElement(h,null),r)}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,